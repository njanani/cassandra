// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `C2SPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.apache.cassandra.ice;

public final class C2SPrxHelper extends Ice.ObjectPrxHelperBase implements C2SPrx
{
    public void
    Append(String bucketID, String objID, byte[] content)
    {
        Append(bucketID, objID, content, null, false);
    }

    public void
    Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx)
    {
        Append(bucketID, objID, content, __ctx, true);
    }

    private void
    Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                __del.Append(bucketID, objID, content, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Append_name = "Append";

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content)
    {
        return begin_Append(bucketID, objID, content, null, false, null);
    }

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx)
    {
        return begin_Append(bucketID, objID, content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, Ice.Callback __cb)
    {
        return begin_Append(bucketID, objID, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Append(bucketID, objID, content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, Callback_C2S_Append __cb)
    {
        return begin_Append(bucketID, objID, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, Callback_C2S_Append __cb)
    {
        return begin_Append(bucketID, objID, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Append(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Append_name, __cb);
        try
        {
            __result.__prepare(__Append_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            ByteSeqHelper.write(__os, content);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_Append(Ice.AsyncResult __result)
    {
        __end(__result, __Append_name);
    }

    public void
    Delete(String bucketID, String objID)
    {
        Delete(bucketID, objID, null, false);
    }

    public void
    Delete(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        Delete(bucketID, objID, __ctx, true);
    }

    private void
    Delete(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                __del.Delete(bucketID, objID, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Delete_name = "Delete";

    public Ice.AsyncResult begin_Delete(String bucketID, String objID)
    {
        return begin_Delete(bucketID, objID, null, false, null);
    }

    public Ice.AsyncResult begin_Delete(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        return begin_Delete(bucketID, objID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Delete(String bucketID, String objID, Ice.Callback __cb)
    {
        return begin_Delete(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Delete(String bucketID, String objID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Delete(bucketID, objID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Delete(String bucketID, String objID, Callback_C2S_Delete __cb)
    {
        return begin_Delete(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Delete(String bucketID, String objID, java.util.Map<String, String> __ctx, Callback_C2S_Delete __cb)
    {
        return begin_Delete(bucketID, objID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Delete(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Delete_name, __cb);
        try
        {
            __result.__prepare(__Delete_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_Delete(Ice.AsyncResult __result)
    {
        __end(__result, __Delete_name);
    }

    public void
    Get(String bucketID, String objID, ByteSeqHolder content)
    {
        Get(bucketID, objID, content, null, false);
    }

    public void
    Get(String bucketID, String objID, ByteSeqHolder content, java.util.Map<String, String> __ctx)
    {
        Get(bucketID, objID, content, __ctx, true);
    }

    private void
    Get(String bucketID, String objID, ByteSeqHolder content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("Get");
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                __del.Get(bucketID, objID, content, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Get_name = "Get";

    public Ice.AsyncResult begin_Get(String bucketID, String objID)
    {
        return begin_Get(bucketID, objID, null, false, null);
    }

    public Ice.AsyncResult begin_Get(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        return begin_Get(bucketID, objID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Get(String bucketID, String objID, Ice.Callback __cb)
    {
        return begin_Get(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Get(String bucketID, String objID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Get(bucketID, objID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Get(String bucketID, String objID, Callback_C2S_Get __cb)
    {
        return begin_Get(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Get(String bucketID, String objID, java.util.Map<String, String> __ctx, Callback_C2S_Get __cb)
    {
        return begin_Get(bucketID, objID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Get(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__Get_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Get_name, __cb);
        try
        {
            __result.__prepare(__Get_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_Get(ByteSeqHolder content, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __Get_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        content.value = ByteSeqHelper.read(__is);
        __is.endReadEncaps();
    }

    public void
    Process(String bucketID, String objID)
    {
        Process(bucketID, objID, null, false);
    }

    public void
    Process(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        Process(bucketID, objID, __ctx, true);
    }

    private void
    Process(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                __del.Process(bucketID, objID, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Process_name = "Process";

    public Ice.AsyncResult begin_Process(String bucketID, String objID)
    {
        return begin_Process(bucketID, objID, null, false, null);
    }

    public Ice.AsyncResult begin_Process(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        return begin_Process(bucketID, objID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Process(String bucketID, String objID, Ice.Callback __cb)
    {
        return begin_Process(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Process(String bucketID, String objID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Process(bucketID, objID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Process(String bucketID, String objID, Callback_C2S_Process __cb)
    {
        return begin_Process(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Process(String bucketID, String objID, java.util.Map<String, String> __ctx, Callback_C2S_Process __cb)
    {
        return begin_Process(bucketID, objID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Process(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Process_name, __cb);
        try
        {
            __result.__prepare(__Process_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_Process(Ice.AsyncResult __result)
    {
        __end(__result, __Process_name);
    }

    public void
    Put(String bucketID, String objID, byte[] content)
    {
        Put(bucketID, objID, content, null, false);
    }

    public void
    Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx)
    {
        Put(bucketID, objID, content, __ctx, true);
    }

    private void
    Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                __del.Put(bucketID, objID, content, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Put_name = "Put";

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content)
    {
        return begin_Put(bucketID, objID, content, null, false, null);
    }

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx)
    {
        return begin_Put(bucketID, objID, content, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, Ice.Callback __cb)
    {
        return begin_Put(bucketID, objID, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Put(bucketID, objID, content, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, Callback_C2S_Put __cb)
    {
        return begin_Put(bucketID, objID, content, null, false, __cb);
    }

    public Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, Callback_C2S_Put __cb)
    {
        return begin_Put(bucketID, objID, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Put(String bucketID, String objID, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Put_name, __cb);
        try
        {
            __result.__prepare(__Put_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            ByteSeqHelper.write(__os, content);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_Put(Ice.AsyncResult __result)
    {
        __end(__result, __Put_name);
    }

    public long
    Size(String bucketID, String objID)
    {
        return Size(bucketID, objID, null, false);
    }

    public long
    Size(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        return Size(bucketID, objID, __ctx, true);
    }

    private long
    Size(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("Size");
                __delBase = __getDelegate(false);
                _C2SDel __del = (_C2SDel)__delBase;
                return __del.Size(bucketID, objID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __Size_name = "Size";

    public Ice.AsyncResult begin_Size(String bucketID, String objID)
    {
        return begin_Size(bucketID, objID, null, false, null);
    }

    public Ice.AsyncResult begin_Size(String bucketID, String objID, java.util.Map<String, String> __ctx)
    {
        return begin_Size(bucketID, objID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_Size(String bucketID, String objID, Ice.Callback __cb)
    {
        return begin_Size(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Size(String bucketID, String objID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Size(bucketID, objID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_Size(String bucketID, String objID, Callback_C2S_Size __cb)
    {
        return begin_Size(bucketID, objID, null, false, __cb);
    }

    public Ice.AsyncResult begin_Size(String bucketID, String objID, java.util.Map<String, String> __ctx, Callback_C2S_Size __cb)
    {
        return begin_Size(bucketID, objID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_Size(String bucketID, String objID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__Size_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Size_name, __cb);
        try
        {
            __result.__prepare(__Size_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(bucketID);
            __os.writeString(objID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_Size(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __Size_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        long __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readLong();
        __is.endReadEncaps();
        return __ret;
    }

    public static C2SPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (C2SPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    C2SPrxHelper __h = new C2SPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static C2SPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (C2SPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    C2SPrxHelper __h = new C2SPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static C2SPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    C2SPrxHelper __h = new C2SPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static C2SPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    C2SPrxHelper __h = new C2SPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static C2SPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (C2SPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                C2SPrxHelper __h = new C2SPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static C2SPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        C2SPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            C2SPrxHelper __h = new C2SPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::FleCS::C2S",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _C2SDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _C2SDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, C2SPrx v)
    {
        __os.writeProxy(v);
    }

    public static C2SPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            C2SPrxHelper result = new C2SPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
